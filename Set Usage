#include<set>
using namespace std;

//set是一个内部自动有序且不含重复元素的容器
set<typename> name;
set<typename> Arrayname[Size];

//set只能通过iterator访问，用*it访问元素
set<typename>::iterator it;

//除了vector和string之外的STL容器都不支持*(it+i)的访问方式
set<int> st;
st.insert(3); 
st.insert(2);
st.insert(5);
st.insert(3);
for(set<int>::iterator it=st.begin(); it!=st.end(); it++){
  printf("%d", *it);
}
//2 3 5 

//set常用函数
st.insert(x) // O(logN)
st.find(value) //O(logN)
  set<int>iterator it=st.find(2); printf("%d", *it);
st.erase(it)  //删除单个元素 O(1),先用find找到，然后删除
  st.erase(st.find(100));
st.erase(value) //删除value值的元素，O(logN)
st.erase(first,last)  //first为起始迭代器，last为末尾迭代器的下一个地址[first,last)
  set<int>iterator it = st.find(30);
  st.erase(it, st.end());
st.size();  // O(1)
st.clear()  // O(N)

//set中元素唯一，如果需要处理不唯一的情况，需要使用multiset
//如果需要去重但不排序，可以用unordered_set，用散列代替set内部的红黑树
