面试题 02.03. Delete Middle Node LCCI
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        ListNode *tmp;
        tmp = node->next;
        node->val = node->next->val;
        node->next = node->next->next;
        delete tmp;
        tmp = NULL;
    }
};

剑指 Offer 22. 链表中倒数第k个节点
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        ListNode *p, *node;
        p = node = head;
        if(!p || k<=0)  return NULL;   
        while(k--){
            if(!p)  return NULL;
            p = p->next;
        }
        while(p){
            p = p->next;
            node = node->next;
        }
        return node;
    }
};
//快慢指针

面试题 02.02. Kth Node From End of List LCCI
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int kthToLast(ListNode* head, int k) {
        ListNode *p = head;
        ListNode *node = head;
        if(!p || k<=0)  return NULL;
        while(k--){
            if(!p)  return NULL;
            p = p->next;
        }
        while(p){
            p = p->next;
            node = node->next;        
        }
        return node->val;
    }
};

剑指 Offer 06. 从尾到头打印链表
输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //solution1  8ms
class Solution {
public:
    vector<int> reversePrint(ListNode* head) {
        ListNode *p;
        p = head;
        vector<int> demo;
        while(p){
            demo.push_back(p->val);
            p = p->next;
        }
        reverse(demo.begin(), demo.end());
        return demo;
    }
};
//solution2 4ms
class Solution {
public:
    vector<int> reversePrint(ListNode* head) {
    const ListNode* node = head;
    std::size_t count = 0;
    while (node != nullptr) {
        ++count;
        node = node->next;
    }
    std::vector<int> nums(count);  // 预分配 count 个空间。
    node = head;
    for (auto i = nums.rbegin(); i != nums.rend(); ++i) {
        *i = node->val;
        node = node->next;
    }
    return nums;
    }
};
//reverse-iteratot usage

83. Remove Duplicates from Sorted List
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head || !head->next)
            return head;
        ListNode* p = head;
        while(p->next!=NULL && p!=NULL)
        {
            if(p->val == p->next->val)
            {   
                ListNode *q;
                q = p->next;
                p->next = q->next;
                delete q;
            }
            else 
                p = p->next;
        }
        return head;
    }
};
//In the process of "while", ensure p and p->next can exist

5558. Merge In Between Linked Lists
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode *p = list1;
        for(int i=0; i<a-1; i++){
            p = p->next;
        }
        ListNode *res = p->next;
        ListNode *temp;
        for(int k=a; k<b; k++){
            temp = res->next;
            delete res;
            res = temp;
        }
        p->next = list2;
        while(p->next != NULL){
            p = p->next;
        }
        p->next = res->next;
        delete res;

        return list1;
    }
};
//remember the location whose index is (a-1)
//delete the list whose index from (a) to (b-1) by order and remember the location (b)
//link the node(a-1) and the head of list2, tranverse until the end of the list2
//link the tail node of the list2 and node(b-1)->node, delete the node(b-1)
//return list1
