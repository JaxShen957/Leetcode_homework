226-->114-->116-->654-->105-->106

搞清楚当前root节点该做什么？根据函数定义递归调用子节点！

226.翻转二叉树
  1.前序遍历确定
  2.约束条件root==null，返回null
  3.root.left和root.right通过中介tmp交换
  
114.二叉树展开为链表
  1.后序遍历确定
  2.左子树拉平，右子树拉平
  3.右子树通过中介tmp存储，左子树嫁接到右子树上，左子树置空
  4.将右子树接到左子树的尾巴
  5。约束条件root==null，结束方法return;
  
116.填充每个节点的下一个右侧节点指针
  1.设置一个方法connectTwoNodes(Node n1, Node n2)
  2.前序遍历确定
  3.约束条件n1==null||n2==null，结束方法return;
  4.n1.next = n2;
  5.connectTwoNodes(n1.left, n1.right);
    connectTwoNodes(n2.left, n2.right);
    connectTwoNodes(n1.right, n2.left);

654.最大二叉树
  1.前序遍历确定
  2.找到最大根节点root，并记录它的角标
  3.root.left = buildMaximumBinaryTree(nums, start, index-1);
    root.right = buildMaximumBinaryTree(nums, index+1, end);
    
105.106.前中后序构造二叉树
  1.辅助函数build(int[] preorder, int pre_start, int pre_end, int[] inorder, int in_start, int in_end);
  2.关键在于通过前序或者后序数组确定根节点
  3.先序遍历确定
  4.在中序数组找到根节点的Index
  5.确定左子树数组和右子树数组，递归
  6.输出root到主函数return build(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1)；
