面试题 02.03. Delete Middle Node LCCI
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        ListNode *tmp;
        tmp = node->next;
        node->val = node->next->val;
        node->next = node->next->next;
        delete tmp;
        tmp = NULL;
    }
};

剑指 Offer 22. 链表中倒数第k个节点
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* getKthFromEnd(ListNode* head, int k) {
        ListNode *p, *node;
        p = node = head;
        if(!p || k<=0)  return NULL;   
        while(k--){
            if(!p)  return NULL;
            p = p->next;
        }
        while(p){
            p = p->next;
            node = node->next;
        }
        return node;
    }
};
//快慢指针

面试题 02.02. Kth Node From End of List LCCI
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int kthToLast(ListNode* head, int k) {
        ListNode *p = head;
        ListNode *node = head;
        if(!p || k<=0)  return NULL;
        while(k--){
            if(!p)  return NULL;
            p = p->next;
        }
        while(p){
            p = p->next;
            node = node->next;        
        }
        return node->val;
    }
};

剑指 Offer 06. 从尾到头打印链表
输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //solution1  8ms
class Solution {
public:
    vector<int> reversePrint(ListNode* head) {
        ListNode *p;
        p = head;
        vector<int> demo;
        while(p){
            demo.push_back(p->val);
            p = p->next;
        }
        reverse(demo.begin(), demo.end());
        return demo;
    }
};
//solution2 4ms
class Solution {
public:
    vector<int> reversePrint(ListNode* head) {
    const ListNode* node = head;
    std::size_t count = 0;
    while (node != nullptr) {
        ++count;
        node = node->next;
    }
    std::vector<int> nums(count);  // 预分配 count 个空间。
    node = head;
    for (auto i = nums.rbegin(); i != nums.rend(); ++i) {
        *i = node->val;
        node = node->next;
    }
    return nums;
    }
};
//reverse-iteratot usage

83. Remove Duplicates from Sorted List
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head || !head->next)
            return head;
        ListNode* p = head;
        while(p->next!=NULL && p!=NULL)
        {
            if(p->val == p->next->val)
            {   
                ListNode *q;
                q = p->next;
                p->next = q->next;
                delete q;
            }
            else 
                p = p->next;
        }
        return head;
    }
};
//In the process of "while", ensure p and p->next can exist

5558. Merge In Between Linked Lists
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode *p = list1;
        for(int i=0; i<a-1; i++){
            p = p->next;
        }
        ListNode *res = p->next;
        ListNode *temp;
        for(int k=a; k<b; k++){
            temp = res->next;
            delete res;
            res = temp;
        }
        p->next = list2;
        while(p->next != NULL){
            p = p->next;
        }
        p->next = res->next;
        delete res;

        return list1;
    }
};
//remember the location whose index is (a-1)
//delete the list whose index from (a) to (b-1) by order and remember the location (b)
//link the node(a-1) and the head of list2, tranverse until the end of the list2
//link the tail node of the list2 and node(b-1)->node, delete the node(b-1)
//return list1

剑指 Offer 24. 反转链表
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        vector<int> temp;
        ListNode *p = head;
        while(p != NULL){
            temp.push_back(p->val);
            p = p->next;
        }
        p = head;
        while(p != NULL){
            p->val = temp.back();
            temp.pop_back();
            p = p->next;
        }
        return head;
    }
};  //vector存值
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode *post=NULL, *pre=head;
        while(pre != NULL){
            ListNode *tmp;
            tmp = pre->next;
            pre->next = post;
            post = pre;
            pre = tmp;
        }
        return post;
    }
};//双指针
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL || head->next==NULL)
            return head;
        ListNode *cur = reverseList(head->next);
        head->next->next = head;
        head->next = NULL;
        return cur;
    }
};//递归：递归的核心思路就是：当前链表的次节点往后都已经反转好了，所以只要反转头两个节点就可以了。这也是curr固定的原因，cur就是原链表的最后一个节点。

#Leetcode876. Middle of the Linked List
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *p = head;
        int cnt=0;
        while(p != NULL){
            cnt++;
            p = p->next;
        }
        int k = cnt/2;
        p = head;
        while(k>0 && p!=NULL){
            p = p->next;
            k--;
        }
        return p;
    }
};

面试题 02.01. Remove Duplicate Node LCCI
class Solution {
public:
    ListNode* removeDuplicateNodes(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;
        while(slow != NULL){
            fast = slow;
            while(fast->next != NULL){
                if(fast->next->val == slow->val){
                    fast->next = fast->next->next;
                }
                else{
                    fast = fast->next;
                }
            }
            slow = slow->next;
        }
        return head;
    }
};
//bubble sort, O(n^2)
ListNode *Solution::removeDuplicateNodes(ListNode *head) {
    if (!head) return head;      // 链表为空
    unordered_set<int> existed;  // 临时缓冲区
    ListNode *last;              // 存储上一个节点
    auto ans = head;             // 存储头结点
    while (head) {
        // 如果节点值重复
        if (existed.count(head->val)) {
            auto tmp = head;
            head = head->next;
            last->next = head;
            tmp->next = nullptr;
            delete tmp;
        } else {
            existed.insert(head->val);
            last = head;
            head = head->next;
        }
    }
    return ans;
}
//hashmap can improve, but have more cost

面试题 02.07. Intersection of Two Linked Lists LCCI
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *slow = headA;
        ListNode *fast = headB;
        while(slow != NULL){
            fast = headB;
            while(fast != NULL){
                if(slow == fast){
                    return fast;
                }
                else{
                    fast = fast->next;
                }
            }
            slow = slow->next;
        }
        return slow;
    }
};
//it's not a good problem!!!

//Leetcode#21. Merge Two Sorted Lists
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *cur;
        ListNode *head = new ListNode(-1);  //guard node
        cur = head;
        if(!l1 && !l2) return NULL;
        while(l1!=nullptr && l2!=nullptr){
            if(l1->val <= l2->val){
                cur->next = l1;
                l1 = l1->next;
            }
            else{
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }
        if(!l1)  cur->next = l2;
        if(!l2)  cur->next = l1;
        return head->next;
    }
};
//establish a guard node is very important
//factor: ListNode *head = new ListNode;  cur = head;

剑指 Offer 18. 删除链表的节点 LCOF
class Solution {
public:
    ListNode* deleteNode(ListNode* head, int val) {
        if (head->val == val) return head->next;

        ListNode *prev = head;
        ListNode *curr = head->next;

        while (curr != nullptr && curr->val != val) { 
            // 细节要注意这里curr必须不等于空，不然下面找next会错误。
            // 另外不等于空的check要放到前面。
            prev = curr;
            curr = curr->next;
        }
 
        // 注意边界条件，如果curr为空表示没找到值为val的节点，这种情况我们应该跳过，否则会错误。
        if (curr != nullptr) prev->next = curr->next; 

        return head;
    }
};//双指针
class Solution {
public:
    ListNode* deleteNode(ListNode* head, int val) {
        if(head->val == val)    return head->next;
        ListNode *front = new ListNode(-1);
        front->next = head;
        ListNode *p = front;
        while(p->next->val!=val && p->next!=nullptr){
            p = p->next;
        }
        if(p->next!=nullptr)
            p->next = p->next->next;
        return head;
    }
};//建立头结点再扫描

剑指 Offer 52. 两个链表的第一个公共节点
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB)    return nullptr;
        ListNode *p1=headA, *p2=headB;
        while(p1 || p2){
            if(!p1)
                p1=headB;
            if(!p2)
                p2=headA;
            if(p1==p2)
                return p1;
            p1=p1->next;
            p2=p2->next;
        }
        return nullptr;
    }
};
